// each item here will have a code of 8 bits in hex

mod addr_space;
mod aggregate_expr; 
mod aggregate_inst; 
mod alias; 
mod alignment; 
mod alloc_inst; 
mod array_const; 
mod constant; 
mod constant_expr; 
mod atomic_ordering; 
mod atomic_rmw_inst; 
mod attr_group_def; 
mod auth; 
mod bin_op; 
mod binary_expr; 
mod binary_inst; 
mod bitwise_expr; 
mod bitwise_inst; 
mod block_address_const; 
mod call_inst; 
mod calling_conv; 
mod catch_pad_inst; 
mod cleanup_pad_inst; 
mod cmp_xchg_inst; 
mod comdat; 
mod conversion_expr; 
mod conversion_inst; 
mod dereferenceable; 
mod dll_storage_class; 
mod exception_scope; 
mod f_cmp_inst; 
mod f_pred; 
mod fast_math_flag; 
mod fence_inst; 
mod float_lit; 
//mod float_type; 
//mod gc; 
mod get_element_ptr_inst; 
mod global_att; 
mod global_def; 
mod i_cmp_inst; 
mod i_pred; 
mod func_attr; 
mod function_body; 
mod function_decl; 
mod function_def; 
mod function_header; 
mod ident; 
mod metadata_attachment; 
mod metadata_def; 
mod metadata_id; 
mod metadata_name; 
mod metadata_node; 
mod metadata;
mod inline_asm; 
mod index; 
mod immutable; 
mod indirect_symbol_def; 
mod instruction; 
mod landing_pad_inst; 
mod linkage; 
mod load_inst; 
//mod local_label; 
mod md_fields; 
mod md_node; 
mod md_string; 
mod md_tuple; 
mod memory_expr; 
mod memory_inst; 
mod op_flag; 
//mod opt_personality; 
//mod opt_prefix; 
//mod opt_prologue; 
mod other_exp; 
mod overflow_flag; 
mod phi_inst; 
mod range; 
mod section; 
mod select_inst; 
mod selection_kind; 
mod sign; 
//mod source_filename; 
mod sret; 
mod store_inst; 
mod struct_const; 
mod tail; 
mod target_definition; 
mod tls_model; 
mod param_attr; 
mod type_const; 
mod type_def; 
mod type_value; 
mod types; 
mod value_inst; 
mod value; 
mod unnamed_addr; 
mod unwind_target; 
mod va_arg_inst; 
mod vector_const; 
mod vector_expr; 
mod vector_inst; 
mod visibility;
mod arg;
mod return_attr;
mod operand_bundle;
mod exception_arg;
mod use_list_order;
mod use_list_order_dd;
mod preemption_specifier;
mod thread_local;
mod clause;
mod inc;
mod case;
mod global_decl;
mod memory_arg_item;
mod terminator;
mod param;
mod comment;
mod top_level_entity;
mod item;

pub use addr_space::*;
pub use aggregate_expr::*; 
pub use aggregate_inst::*; 
pub use alias::*; 
pub use alignment::*; 
pub use alloc_inst::*; 
pub use array_const::*; 
pub use constant_expr::*; 
pub use constant::*; 
pub use atomic_ordering::*; 
pub use atomic_rmw_inst::*; 
pub use attr_group_def::*; 
pub use auth::*; 
pub use bin_op::*; 
pub use binary_expr::*; 
pub use binary_inst::*; 
pub use bitwise_expr::*; 
pub use bitwise_inst::*; 
pub use block_address_const::*; 
pub use call_inst::*; 
pub use calling_conv::*; 
pub use catch_pad_inst::*; 
pub use cleanup_pad_inst::*; 
pub use cmp_xchg_inst::*; 
pub use comdat::*; 
pub use conversion_expr::*; 
pub use conversion_inst::*; 
pub use dereferenceable::*; 
pub use dll_storage_class::*; 
pub use exception_scope::*; 
pub use f_cmp_inst::*; 
pub use f_pred::*; 
pub use fast_math_flag::*; 
pub use fence_inst::*; 
pub use float_lit::*; 
//pub use float_type::*; 
//pub use gc::*; 
pub use get_element_ptr_inst::*; 
pub use global_att::*; 
pub use global_def::*; 
pub use i_cmp_inst::*; 
pub use i_pred::*; 
pub use func_attr::*; 
pub use function_body::*; 
pub use function_decl::*; 
pub use function_def::*; 
pub use function_header::*; 
pub use ident::*; 
pub use metadata_attachment::*; 
pub use metadata_def::*; 
pub use metadata_id::*; 
pub use metadata_name::*; 
pub use metadata_node::*; 
pub use metadata::*; 
pub use inline_asm::*; 
pub use index::*; 
pub use immutable::*; 
pub use indirect_symbol_def::*; 
pub use instruction::*; 
pub use landing_pad_inst::*; 
pub use linkage::*; 
pub use load_inst::*; 
//pub use local_label::*; 
pub use md_fields::*; 
pub use md_node::*; 
pub use md_string::*; 
pub use md_tuple::*; 
pub use memory_expr::*; 
pub use memory_inst::*; 
pub use op_flag::*; 
//pub use opt_personality::*; 
//pub use opt_prefix::*; 
//pub use opt_prologue::*; 
pub use other_exp::*; 
pub use overflow_flag::*; 
pub use phi_inst::*; 
pub use range::*; 
pub use section::*; 
pub use select_inst::*; 
pub use selection_kind::*; 
pub use sign::*; 
//pub use source_filename::*; 
pub use sret::*; 
pub use store_inst::*; 
pub use struct_const::*; 
pub use tail::*; 
pub use target_definition::*; 
pub use tls_model::*; 
pub use param_attr::*; 
pub use type_const::*; 
pub use type_def::*; 
pub use type_value::*; 
pub use types::*; 
pub use unnamed_addr::*; 
pub use unwind_target::*; 
pub use va_arg_inst::*; 
pub use value_inst::*; 
pub use vector_const::*; 
pub use vector_expr::*; 
pub use vector_inst::*; 
pub use visibility::*;
pub use arg::*;
pub use return_attr::*;
pub use operand_bundle::*;
pub use exception_arg::*;
pub use use_list_order::*;
pub use use_list_order_dd::*;
pub use preemption_specifier::*;
pub use thread_local::*;
pub use clause::*;
pub use inc::*;
pub use case::*;
pub use global_decl::*;
pub use memory_arg_item::*;
pub use terminator::*;
pub use value::*; 
pub use param::*;
pub use comment::*;
pub use top_level_entity::*;
pub use item::*;

#[derive(Debug)]
pub struct LlvmAst {
    pub items: Vec<Item>
}

impl LlvmAst {
    pub fn new() -> Self {
        LlvmAst {
            items: vec![]
        }
    }
}