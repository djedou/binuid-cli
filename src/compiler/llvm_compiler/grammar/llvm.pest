// ### [ Lexical part ] ########################################################
AsciiLetterUpper = {'A'..'Z'}
AsciiLetterLower = {'a'..'z'}
AsciiLetter = { 
    AsciiLetterUpper
	| AsciiLetterLower
}
Letter = { 
    AsciiLetter
	| Dollar
	| Minus
	| Dot
	| Underscore
}
EscapeLetter = {Letter | "\\" }
DecimalDigit = {'0'..'9'}
HexDigit = { 
    DecimalDigit
	| 'A'..'F'
	| 'a'..'f'
}
CommentValue = {(!NEWLINE ~ ANY)*}
Comment = { Semi ~ CommentValue ~ NEWLINE }
Whitespace = _{"\x00" | " " | "\t" | "\r" | "\n"}
Name = @{Letter ~ (Letter | DecimalDigit)* }
EscapeName = @{EscapeLetter ~ (EscapeLetter | DecimalDigit)*}
QuotedName = @{QuotedString}
Id = {Decimals}
GlobalIdent = { 
    GlobalName
	| GglobalId
}
GlobalName = _{At ~ (Name | QuotedName)}
GglobalId = _{At ~ Id}
LocalIdent = { 
    LocalName
	| LocalId
}
LocalName = _{ Percent ~ (Name | QuotedName)}
LocalId = _{Percent ~ Id}
LabelIdent = { 
    (Letter | DecimalDigit)+ ~ Colon
	| QuotedString ~ Colon
}
AttrGroupId = {Pound ~ Id}
ComdatName = {Dollar ~ (Name | QuotedName)}
IntLit = @{DecimalLit}
DecimalLit = {Sign? ~ Decimals}
Decimals = @{DecimalDigit+}
FloatLit = { 
    FracLit
	| SciLit
	| FloatHexLit
}
DecimalPart = @{ DecimalDigit* }
FracLit = { Sign? ~ Decimals ~ Dot ~ DecimalPart }
Sign = { 
    SignPlus
	| SignMinus
}
SciLit = { FracLit ~ ("e" | "E") ~ Sign? ~ Decimals}
FloatHexLitType = {
    HexFP80Constant
    | HexFP128Constant
    | HexPPC128Constant
    | HexHalfConstant
    | HexFPConstant
}
HexDigits = {HexDigit+}
FloatHexLit = { FloatHexLitType ~ HexDigits}
StringLit = @{QuotedString}
QuotedString = { "\"" ~ (!"\"" ~ ANY)* ~ "\""}
IntType = {"i" ~ Decimals}
BinOp = { 
    Add
    | And
    | Max
    | Min
    | Nand
    | Or
    | Sub
    | Umax
    | Umin
    | Xchg
    | Xor
}
MDString = { "!" ~ Whitespace? ~ StringLit}
MetadataId = { Not ~ Id}
MetadataName = {Not ~ EscapeName}
TypeValue = {Type ~ Whitespace? ~ Value}
LhsValue = {Value}
RhsValue = {Value}
LhsType = {Type}
RhsType = {Type}
TypeValues = {TypeValue ~ (Whitespace? ~ TypeValue)*}
MDTuple = { "!" ~ Whitespace? ~ MDFields}
MDFields = _{ "{" ~ Whitespace? ~ MDFieldList? ~ Whitespace? ~ "}"}
MDFieldList = _{MDField ~ Whitespace? ~ (Comma ~ Whitespace? ~ MDField)*}
MDField = {
    NullConst
	| Metadata
}
Metadata = { 
    TypeValue
	| MDString
	| MDTuple
	| MetadataId
}
MetadataAttachment = { MetadataName ~ Whitespace? ~ MDNode?}
MDNode = {
    MDTuple
	| MetadataId
    | MDString
}
MetadataNode = { 
    MetadataId
	//| DIExpression
}
MetadataAttachments = _{ 
    MetadataAttachment ~ (Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachment)*
}
LhsTypeValue = {TypeValue}
RhsTypeValue = {TypeValue}
Tail = {
    Musttail
	| Notail
	| TailKey
}
Auth = {
    Readwrite
    | Writeonly
    | Readonly
    | Read
    | Write
}
FPred = { 
    False
	| True
    | Oeq
    | Oge
    | Ogt
    | Ole
    | Olt
    | One
    | Ord
    | Ueq
    | Uge
    | Ugt
    | Ule
    | Ult
    | Une
    | Uno
}
FastMathFlag = { 
    Afn
    | Arcp
    | Contract
    | Fast
    | Ninf
    | Nnan
    | Nsz
    | Reassoc
}
FastMathFlags = {FastMathFlag ~ Whitespace? ~ (Whitespace? ~ FastMathFlag)*}
IPred = { 
    Eq
	| Ne
	| Sge
	| Sgt
	| Sle
	| Slt
	| Uge
	| Ugt
	| Ule
	| Ult
}
Linkage = { 
    Appending
	| AvailableExternally
	| Common
	| Internal
	| Linkonce
	| linkonceOdr
	| Private
	| Weak
	| WeakOdr
}
ExternLinkage = { 
    ExternWeak
	| External
}
OverflowFlags = {OverflowFlag ~ (Whitespace? ~ OverflowFlag)*}
OverflowFlag = { 
    Nsw
	| Nuw
}
ParamAttrs = { ParamAttr ~ (Whitespace? ~ ParamAttr)*}
ParamAttr = { 
    Alignment
	| Dereferenceable
	| StringLit
	| Byval
	| Inalloca
	| Inreg
	| Nest
	| Noalias
	| Nocapture
	| Nonnull
	| Readnone
	| Readonly
	| Returned
	| Signext
	| Sret
	| Swifterror
	| Swiftself
	| Writeonly
	| Zeroext
    | Noundef
    | DeadOnUnwind
    | Writable
    | Immarg
    | Allocalign
    | Allocptr
    | Range
}
Range = {RangeKey ~ Whitespace? ~ "(" ~ Whitespace? ~ Type ~ Whitespace? ~ IntLit ~ Whitespace? ~ Comma ~ Whitespace? ~ IntConst ~ Whitespace? ~")" }
Sret = {SretKey ~ "(" ~ Whitespace? ~ Type ~ Whitespace? ~ ")" | SretKey}
Alignment = { "align" ~ Whitespace? ~ IntLit}
DereferenceableItem = _{ 
	DereferenceableNullable
    | DereferenceableNonNullable
}
Dereferenceable = {DereferenceableItem ~ Whitespace? ~ "(" ~ Whitespace? ~ IntLit ~ Whitespace? ~ ")"}
ExceptionScope = { 
    NoneConst
	| LocalIdent
}
Indices = {Index ~ Whitespace? ~ (Comma ~ Whitespace? ~ Index)*}
Index = {IntLit}
Section = { "section" ~ Whitespace? ~ StringLit}
TLSModel = { 
    InitialExec
	| LocalDynamic
	| LocalExec
}
UnnamedAddr = { 
    LocalUnnamedAddr
	| NoLocalUnnamedAddr
}
Visibility = { 
    Default
	| Hidden
	| Protected
}
Alias = { 
    Als
	| Ifunc
}
LocalLabel = {LabelType ~ Whitespace? ~ LocalIdent}
UnwindTarget = { 
    ToCaller
	| LocalLabel
}
AtomicOrdering = { 
    AcqRel
    | Acquire
    | Monotonic
    | Release
    | SeqCst
    | Unordered
}
CcIntLit = {Cc ~ Whitespace? ~ IntLit}
CallingConv = { 
    AmdgpuCs
    | AmdgpuEs
    | AmdgpuGs
    | AmdgpuHs
    | AmdgpuKernel
    | AmdgpuLs
    | AmdgpuPs
    | AmdgpuVs
    | AnyregCc
    | ArmAapcsVfpcc
    | ArmAapcscc
    | ArmApcscc
    | AvrIntrcc
    | AvrSignalcc
    | Coldcc
    | CxxFastTlscc
    | FastCc
    | GhCcc
    | HhvmCcc
    | HhvmCc
    | IntelOclBicc
    | Msp430Intrcc
    | PreserveAllcc
    | PreserveMostcc
    | PtxDevice
    | PtxKernel
    | SpirFunc
    | SpirKernel
    | Swiftcc
    | WebkitJscc
    | Win64cc
    | X8664Sysvcc
    | X86Fastcallcc
    | X86Intrcc
    | X86Regcallcc
    | X86Stdcallcc
    | X86Thiscallcc
    | X86Vectorcallcc
    | Ccc
	| CcIntLit
}

AlignIntLit = {Align ~ Whitespace? ~ Eq ~ Whitespace? ~ IntLit}
AlignstackIntLit = {Alignstack ~ Whitespace? ~ Eq ~ Whitespace? ~ IntLit}
BinStringLit = {LhsStringLit ~ Whitespace? ~ Eq ~ Whitespace? ~ RhsStringLit}
FuncAttr = {
	// not used in attribute groups.
    AttrGroupId
	// used in attribute groups.
	| AlignIntLit
	| AlignstackIntLit
	| BinStringLit
	// used in functions.
	| Alignment
	| AllocSize
	| StackAlignment
	| StringLit
	| Alwaysinline
    | Argmemonly
    | Builtin
    | Cold
    | Convergent
    | InaccessiblememOrArgmemonly
    | Inaccessiblememonly
    | Inlinehint
    | Jumptable
    | Minsize
    | Naked
    | Nobuiltin
    | Noduplicate
    | Noimplicitfloat
    | Noinline
    | Nonlazybind
    | Norecurse
    | Noredzone
    | Noreturn
    | Nounwind
    | Optnone
    | Optsize
	| Readnone
	| Readonly
	| ReturnsTwice
    | Safestack
    | SanitizeAddress
    | SanitizeHwaddress
    | SanitizeMemory
    | SanitizeThread
    | Speculatable
    | Ssp
    | Sspreq
    | Sspstrong
    | Strictfp
    | Uwtable
    | Uriteonly
    | Memory
    | Mustprogress
    | Nofree
    | Nosync
    | Willreturn
    | Mocallback
    | Allockind
}
Immutable = { 
    Const
	| Glob
}
OptGC = { Gc ~ Whitespace? ~ StringLit}
MetadataDef = {MetadataId ~ Whitespace? ~ Eq ~ Whitespace? ~ Distinct? ~ Whitespace? ~ MDTuple?}
FloatType = { 
    Half
	| Float
	| Double
	| X86Dp80
	| Fp128
	| PpcFp128
}
TypeKind = {OpaqueType | Type}
TypeDef = {LocalIdent ~ Whitespace? ~ Eq ~ Whitespace? ~ Ty ~ Whitespace? ~ TypeKind}
SelectionKind = { 
    Any
	| ExactMatch
	| Largest
	| Noduplicates
	| Samesize
}
TypeConsts = _{
    TypeConst ~ (Comma ~ Whitespace? ~ TypeConst)*
}
TypeConst = { Type ~ Whitespace? ~ Constant}
Constant = { 
    BoolConst
	| IntConst
	| FloatConst
	| NullConst
	| NoneConst
	| StructConst
	| ArrayConst
	| CharArrayConst
	| VectorConst
	| ZeroInitializerConst
	| GlobalIdent
	| UndefConst
	| BlockAddressConst
	| ConstantExpr
}
BoolConst = { 
    "true"
	| "false"
}
IntConst = {IntLit}
FloatConst = {FloatLit}

GrOrLessParath = {"<" ~ Whitespace? ~ "{" ~ Whitespace? ~ TypeConsts ~ Whitespace? ~ "}" ~ Whitespace? ~ ">"}
GrOrLessParathEmpty = {"<" ~ Whitespace? ~ "{" ~ Whitespace? ~ "}" ~ Whitespace? ~ ">"}
OnlyParath = {"{" ~ Whitespace? ~ TypeConsts ~ Whitespace? ~ "}"}
OnlyParathEmpty = {"{" ~ Whitespace? ~ "}"}
StructConst = { 
    GrOrLessParath
	| GrOrLessParathEmpty
	| OnlyParath
    | OnlyParathEmpty
}
ArrayConst = { "[" ~ Whitespace? ~ TypeConsts? ~ Whitespace? ~ "]"}
CharArrayConst = { "c" ~ Whitespace? ~ StringLit}
VectorConst = { "<" ~ Whitespace? ~ TypeConsts? ~ Whitespace? ~ ">"}
BlockAddressConst = { BlockAddress ~ Whitespace? ~ "(" ~ Whitespace? ~ GlobalIdent ~ Whitespace? ~ Comma ~ Whitespace? ~ LocalIdent ~ Whitespace? ~ ")"}
ConstantExpr = {
	// Binary expressions
    BinaryExpr
	// Bitwise expressions
	| BitwiseExpr
	// Vector expressions
	| VectorExpr
    // Aggregate expressions
	| AggregateExpr
	// Memory expressions
	| MemoryExpr
	// Conversion expressions
	| ConversionExpr
	// Other expressions
	| OtherExp
}

LhsExpr = {TypeConst}
RhsExpr = {TypeConst}
OpFlag = {
    OverflowFlags
    | Exact
    | Disjoint
}
BinaryOp = {
    Add
    | FAdd
    | Sub
    | FSub
    | Mul
    | FMul
    | UDiv
    | SDiv
    | FDiv
    | URem
    | SRem
    | FRem
}
BinaryExpr = { BinaryOp ~ Whitespace? ~ OpFlag? ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsExpr ~ Whitespace? ~ ")"}
BitwiseOp = {
    Shl
    | LShr
    | AShr
    | And
    | Or
    | Xor
}
BitwiseExpr = {BitwiseOp ~ Whitespace? ~ OpFlag? ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsExpr ~ Whitespace? ~ ")"}
VectorOp = {
    ExtractElement
    | InsertElement
    | ShuffleVector
}
VectorExpr = {VectorOp ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsExpr ~ Whitespace? ~ Comma? ~ Whitespace? ~ TypeConst? ~ Whitespace? ~ ")"}
AggregateOp = {ExtractValue | InsertValue}
AggregateExpr = {AggregateOp ~ Whitespace? ~"(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ Comma? ~ Whitespace? ~ RhsExpr? ~ Whitespace? ~ Indices? ~ Whitespace? ~")"}
MemoryOp = {GetElementPtr}
MemoryExpr = { MemoryOp ~ Whitespace? ~ InBounds? ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ RhsExpr ~ Whitespace? ~ Comma ~ Whitespace? ~ GEPConstIndices? ~ Whitespace? ~ ")"}
GEPConstIndices = {GEPConstIndex ~ Whitespace? ~ (Comma ~ Whitespace? ~ GEPConstIndex)*}
GEPConstIndex = { Inrange? ~ Whitespace? ~ TypeConst}
ConversionOp = {
    Trunc
    | ZExt
    | SExt
    | FPTrunc
    | FPExt
    | FPToUI
    | FPToSI
    | UIToFP
    | SIToFP
    | PtrToInt
    | IntToPtr
    | BitCast
    | AddrSpaceCast
}
ConversionExpr = {ConversionOp ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ "to" ~ Whitespace? ~ Type ~ Whitespace? ~ ")"}
PredFlag = {
    IPred
    | FPred
}

OtherOp = {
    ICmp
    | FCmp
    | Select
}
OtherExp = {OtherOp ~ Whitespace? ~ PredFlag? ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsExpr ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsExpr ~ Whitespace? ~ Comma? ~ Whitespace? ~ TypeConst? ~ Whitespace? ~ ")"}

///////
Type = { 
    VoidType
	| FuncType
	| FirstClassType
}
NoFuncType = { 
    VoidType
	//| FuncType
	| FirstClassType
}
FirstClassType = { 
    ConcreteType
	| MetadataType
}

ConcreteType = { 
    IntType
	// Type ::= 'float' | 'void' (etc)
	| FloatType
	// Type ::= Type '*'
	// Type ::= Type 'addrspace' '(' uint32 ')' '*'
	| PointerPtrType
	// Type ::= '<' ... '>'
	| VectorType
	| LabelType
	// Type ::= '[' ... ']'
	| ArrayType
	// Type ::= StructType
	| StructType
	// Type ::= %foo
	// Type ::= %4
	| NamedType
	| MMXType
	| TokenType
    | VoidType
}
FuncType = { NoFuncType ~ Whitespace? ~ "(" ~ Whitespace? ~ Params ~ Whitespace? ~ ")"}

// --- [ Floating-point Types ] ------------------------------------------------
PointerPtrType = { "ptr"}
PointerType = { Type ~ Whitespace? ~ AddrSpace? ~ Whitespace? ~ "*"}
AddrSpace = { AddrSp ~ Whitespace? ~ "(" ~ Whitespace? ~ IntLit ~ Whitespace? ~ ")"}
VectorType = { "<" ~ Whitespace? ~ IntLit ~ Whitespace? ~ "x" ~ Whitespace? ~ Type ~ Whitespace? ~ ">"}
ArrayType = { "[" ~ Whitespace? ~ IntLit ~ Whitespace? ~ "x" ~ Whitespace? ~ Type ~ Whitespace? ~ "]"}

GrOrLessParathType = {"<" ~ Whitespace? ~ "{" ~ Whitespace? ~ TypeList ~ Whitespace? ~ "}" ~ Whitespace? ~ ">"}
GrOrLessParathEmptyType = {"<" ~ Whitespace? ~ "{" ~ Whitespace? ~ "}" ~ Whitespace? ~ ">"}
OnlyParathType = {"{" ~ Whitespace? ~ TypeList ~ Whitespace? ~ "}"}
OnlyParathEmptyType = {"{" ~ Whitespace? ~ "}"}
StructType = { 
	GrOrLessParathType
	| GrOrLessParathEmptyType
	| OnlyParathType
    | OnlyParathEmptyType
}
TypeList = _{Type ~ Whitespace? ~ (Comma ~ Whitespace? ~ Type)*}
NamedType = { LocalIdent}
LhsStringLit = {StringLit}
RhsStringLit = {StringLit}
InlineAsm = { Asm ~ Whitespace? ~ SideEffect? ~ Whitespace? ~ AlignStack? ~ Whitespace? ~ IntelDialect? ~ Whitespace? ~ LhsStringLit ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsStringLit}
Value = { 
    Constant
	| LocalIdent
	| InlineAsm
    | Poison
}
FuncAttrs = {FuncAttr ~ (Whitespace? ~ FuncAttr)*}
DLLStorageClass = { 
    Dllexport
	| Dllimport
}




Instructions = _{InstructionItem ~ (Whitespace* ~ InstructionItem)*}
StartComment = {Comment}
EndComment = {Comment}
InstructionItem = {StartComment? ~ Whitespace* ~ Instruction ~ Whitespace* ~ EndComment?}

LocalInst = {LocalIdent ~ Whitespace? ~ Eq ~ Whitespace? ~ ValueInstruction}
Instruction = {
	// Instructions? not producing values.
    StoreInst
	| FenceInst
	| CmpXchgInst
	| AtomicRMWInst
	// Instructions? producing values.
	| LocalInst
	| ValueInstruction
}
ValueInstruction = {
	// Binary instructions
    BinaryInst
	// Bitwise instructions?
	| BitwiseInst
	// Vector instructions?
	| VectorInst
    // Aggregate instructions?
	| AggregateInst
	// Memory instructions?
	| MemoryInst
	// Conversion instructions?
	| ConversionInst
	// Other instructions?
	| ICmpInst
	| FCmpInst
	| PhiInst
	| SelectInst
	| CallInst
	| VAArgInst
	| LandingPadInst
	| CatchPadInst
	| CleanupPadInst
    | Terminator
}

AtomicStore1 = {"store" ~ Whitespace? ~ "atomic" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue /*~ Whitespace? ~ OptSyncScope*/ ~ Whitespace? ~ AtomicOrdering ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
AtomicStore2 = {"store" ~ Whitespace? ~ "atomic" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue /*~ Whitespace? ~ OptSyncScope*/ ~ Whitespace? ~ AtomicOrdering ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
VolatileStore1 = {"store" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
VolatileStore2 = {"store" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
StoreInst = { 
    AtomicStore1
	| AtomicStore2
	| VolatileStore1
	| VolatileStore2
}
FenceInst = { "fence" ~ Whitespace? ~ AtomicOrdering ~ Whitespace? ~ MetadataAttachments?}
LhsAtomicOrdering = {AtomicOrdering}
RhsAtomicOrdering = {AtomicOrdering}
CmpXchgInst = { "cmpxchg" ~ Whitespace? ~ Weak? ~ Whitespace? ~ Volatile? ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ TypeValue /*~ Whitespace? ~ OptSyncScope*/ ~ Whitespace? ~ LhsAtomicOrdering ~ Whitespace? ~ RhsAtomicOrdering ~ Whitespace? ~ MetadataAttachments?}
AtomicRMWInst = { "atomicrmw" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ BinOp ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue /*~ Whitespace? ~ OptSyncScope*/ ~ Whitespace? ~ AtomicOrdering ~ Whitespace? ~ MetadataAttachments?}
BinaryInst = { BinaryOp ~ Whitespace? ~ OpFlag? ~ Whitespace? ~ Type ~ Whitespace? ~ LhsValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsValue ~ Whitespace? ~ MetadataAttachments?}
BitwiseInst = { BitwiseOp ~ Whitespace? ~ OpFlag? ~ Whitespace? ~ Type ~ Whitespace? ~ LhsValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsValue ~ Whitespace? ~ MetadataAttachments?}
VectorInst = { VectorOp ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma? ~ Whitespace? ~ TypeValue? ~ Whitespace? ~ MetadataAttachments?}
AggregateInst = {AggregateOp ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma? ~ Whitespace? ~ RhsTypeValue? ~ Whitespace? ~ Comma? ~ Whitespace? ~ Indices? ~ Whitespace? ~ MetadataAttachments?}

AllocaInst1 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ Comma ~ Whitespace? ~ AddrSpace ~ Whitespace? ~ MetadataAttachments?}
AllocaInst2 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ AddrSpace ~ Whitespace? ~ MetadataAttachments?}
AllocaInst3 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ MetadataAttachments?}
AllocaInst4 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ Comma ~ Whitespace? ~ AddrSpace ~ Whitespace? ~ MetadataAttachments?}
AllocaInst5 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ MetadataAttachments?}
AllocaInst6 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ MetadataAttachments?}
AllocaInst7 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ AddrSpace ~ Whitespace? ~ MetadataAttachments?}
AllocaInst8 = {"alloca" ~ Whitespace? ~ InAlloca? ~ Whitespace? ~ SwiftError? ~ Whitespace? ~ Type ~ Whitespace? ~ MetadataAttachments?}
AllocaInst = { 
    AllocaInst1
	| AllocaInst2
	| AllocaInst3
	| AllocaInst4
	| AllocaInst5
	| AllocaInst6
	| AllocaInst7
	| AllocaInst8
}

LoadInst1 = {"load" ~ Whitespace? ~ "atomic" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue /*~ Whitespace? ~ OptSyncScope*/ ~ Whitespace? ~ AtomicOrdering ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ MetadataAttachments?}
LoadInst2 = {"load" ~ Whitespace? ~ "atomic" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue /*~ Whitespace? ~ OptSyncScope*/ ~ Whitespace? ~ AtomicOrdering ~ Whitespace? ~ MetadataAttachments?}
LoadInst3 = {"load" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ Alignment ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
LoadInst4 = {"load" ~ Whitespace? ~ Volatile? ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ MetadataAttachments?}
LoadInst = {
	// Load.
	| LoadInst1
	// Atomic load.
	| LoadInst2
	| LoadInst3
    | LoadInst4
}

GetElementPtrInst = {MemoryOp ~ Whitespace? ~ InBounds? ~ Whitespace? ~ LhsType ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsType ~ Whitespace? ~ Value ~ Whitespace? ~ Comma? ~ Whitespace? ~ CommaSepTypeValueList? ~ Whitespace? ~ MetadataAttachments?}
MemoryInst = {
    AllocaInst
    | LoadInst
    | GetElementPtrInst
}
ConversionInstFlag = {
    OverflowFlags
    | Nneg
}
ConversionInst = {ConversionOp ~ Whitespace? ~ ConversionInstFlag? ~ Whitespace? ~ LhsType ~ Whitespace? ~ Value ~ Whitespace? ~ "to" ~ Whitespace? ~ RhsType ~ Whitespace? ~ MetadataAttachments?}

ICmpInst = { "icmp" ~ Whitespace? ~ IPred ~ Whitespace? ~ Type ~ Whitespace? ~ LhsValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsValue ~ Whitespace? ~ MetadataAttachments?}
FCmpInst = { "fcmp" ~ Whitespace? ~ FastMathFlags? ~ Whitespace? ~ FPred ~ Whitespace? ~ Type ~ Whitespace? ~ LhsValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsValue ~ Whitespace? ~ MetadataAttachments?}
PhiInst = { "phi" ~ Whitespace? ~ Type ~ Whitespace? ~ IncList ~ Whitespace? ~ MetadataAttachments?}
SelectInst = { "select" ~ Whitespace? ~ LhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsTypeValue ~ Whitespace? ~ Comma ~ Whitespace? ~ TypeValue ~ Whitespace? ~ MetadataAttachments?}
CallInst = { Tail? ~ Whitespace? ~ "call" ~ (Whitespace ~ FastMathFlags ~ Whitespace)? ~ Whitespace? ~ CallingConv? ~ Whitespace? ~ ReturnAttrs? ~ Whitespace? ~ Type ~ Whitespace? ~ Value ~ Whitespace? ~ "(" ~ Whitespace? ~ Args? ~ Whitespace? ~ ")" ~ Whitespace? ~ Comma? ~ Whitespace? ~ FuncAttrs? ~ Whitespace? ~ Comma? ~ Whitespace? ~ OperandBundles? ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
VAArgInst = { "va_arg" ~ Whitespace? ~ LhsType ~ Whitespace? ~ Value ~ Whitespace? ~ Comma ~ Whitespace? ~ RhsType ~ Whitespace? ~ MetadataAttachments?}
LandingPadInst = { "landingpad" ~ Whitespace? ~ Type ~ Whitespace? ~ OptCleanup? ~ Whitespace? ~ Clauses ~ Whitespace? ~ MetadataAttachments?}
CatchPadInst = { "catchpad" ~ Whitespace? ~ "within" ~ Whitespace? ~ LocalIdent ~ Whitespace? ~ "[" ~ Whitespace? ~ ExceptionArgs? ~ Whitespace? ~ "]" ~ Whitespace? ~ MetadataAttachments?}
CleanupPadInst = { "cleanuppad" ~ Whitespace? ~ "within" ~ Whitespace? ~ ExceptionScope ~ Whitespace? ~ "[" ~ Whitespace? ~ ExceptionArgs? ~ Whitespace? ~ "]" ~ Whitespace? ~ MetadataAttachments?}


SourceFilename = { SrcFile ~ Whitespace? ~ Eq ~ Whitespace? ~ StringLit}
TargetKind = _{
    Datalayout
    | Triple
}
TargetDefinition = {Target ~ Whitespace? ~ TargetKind ~ Whitespace? ~ Eq ~ Whitespace? ~ StringLit}
ModuleAsm = { ModuleKey ~ Whitespace? ~ Asm ~ Whitespace? ~ StringLit}
ComdatDef = { ComdatName ~ Whitespace? ~ Eq ~ Whitespace? ~ Comdat ~ Whitespace? ~ SelectionKind}

GlobalDecl = { GlobalIdent ~ Whitespace? ~ Eq ~ Whitespace? ~ ExternLinkage ~ Whitespace? ~ PreemptionSpecifier? ~ Whitespace? ~ Visibility? ~ Whitespace? ~ DLLStorageClass? ~ Whitespace? ~ ThreadLocal? ~ Whitespace? ~ UnnamedAddr? ~ Whitespace? ~ AddrSpace? ~ Whitespace? ~ ExternallyInitialized? ~ Whitespace? ~ Immutable ~ Whitespace? ~ Type ~ Whitespace? ~ GlobalAttrs? ~ Whitespace? ~ FuncAttrs?}
GlobalDef = { GlobalIdent ~ Whitespace? ~ Eq ~ Whitespace? ~ Linkage? ~ Whitespace? ~ PreemptionSpecifier? ~ Whitespace? ~ Visibility? ~ Whitespace? ~ DLLStorageClass? ~ Whitespace? ~ ThreadLocal? ~ Whitespace? ~ UnnamedAddr? ~ Whitespace? ~ AddrSpace? ~ Whitespace? ~ ExternallyInitialized? ~ Whitespace? ~ Immutable ~ Whitespace? ~ Type ~ Whitespace? ~ Constant ~ Whitespace? ~ GlobalAttrs? ~ Whitespace? ~ FuncAttrs?}

GlobalAttrs = {Comma ~ Whitespace? ~ GlobalAttr ~ Whitespace? ~ (Comma ~ Whitespace? ~ GlobalAttr)*}
GlobalAttr = { 
    Section
	| Comdat
	| Alignment
	//   ::= !dbg !57
	| MetadataAttachment
}
LinkageKind = { 
    ExternLinkage
    | Linkage
}
IndirectSymbolDef = { GlobalIdent ~ Whitespace? ~ Eq ~ Whitespace? ~ LinkageKind? ~ Whitespace? ~ PreemptionSpecifier? ~ Whitespace? ~ Visibility? ~ Whitespace? ~ DLLStorageClass? ~ Whitespace? ~ ThreadLocal? ~ Whitespace? ~ UnnamedAddr? ~ Whitespace? ~ Alias ~ Whitespace? ~ Type ~ Whitespace? ~ Comma ~ Whitespace? ~ TypeConst}
FunctionDecl = { Declare ~ Whitespace? ~ MetadataAttachments? ~ Whitespace? ~ ExternLinkage? ~ Whitespace? ~ FunctionHeader}
FunctionDef = { Define ~ Whitespace? ~ Linkage? ~ Whitespace? ~ FunctionHeader ~ Whitespace? ~ MetadataAttachments? ~ Whitespace? ~ FunctionBody}
FunctionHeader = { PreemptionSpecifier? ~ Whitespace? ~ Visibility? ~ Whitespace? ~ DLLStorageClass? ~ Whitespace? ~ CallingConv? ~ Whitespace? ~ ReturnAttrs? ~ Whitespace? ~ Type ~ Whitespace? ~ GlobalIdent ~ Whitespace? ~ "(" ~ Whitespace? ~ Params? ~ Whitespace? ~ ")" ~ Whitespace? ~ UnnamedAddr? ~ Whitespace? ~ FuncAttrs? ~ Whitespace? ~ Section? ~ Whitespace? ~ Comdat? ~ Whitespace? ~ OptGC? ~ Whitespace? ~ OptPrefix? ~ Whitespace? ~ OptPrologue? ~ Whitespace? ~ OptPersonality?}

OptPrefix = {Prefix ~ Whitespace? ~ TypeConst}
OptPrologue = {Prologue ~ Whitespace? ~ TypeConst}
OptPersonality = {Personality ~ Whitespace? ~ TypeConst}

FunctionBody = { "{" ~ Whitespace* ~ BasicBlockList ~ Whitespace* ~ UseListOrders? ~ Whitespace* ~ "}"}
AttrGroupDef = { Attributes ~ Whitespace? ~ AttrGroupId ~ Whitespace? ~ Eq ~ Whitespace? ~ "{" ~ Whitespace? ~ FuncAttrs? ~ Whitespace? ~ "}"}
NamedMetadataDef = { MetadataName ~ Whitespace? ~ Eq ~ Whitespace? ~ Not ~ Whitespace? ~ "{" ~ Whitespace? ~ MetadataNodes? ~ Whitespace? ~ "}"}
MetadataNodes = _{MetadataNode~ Whitespace? ~ (Comma~ Whitespace? ~ MetadataNode)*}


UseListOrders = _{UseListOrder ~ Whitespace? ~ (Whitespace? ~ UseListOrder)*}
UseListOrder = { UseLO ~ Whitespace? ~ Type ~ Whitespace? ~ Value ~ Whitespace? ~ Comma ~ Whitespace? ~ "{" ~ Whitespace? ~ Indices? ~ Whitespace? ~ "}"}
UseListOrderBB = { UseLODB ~ Whitespace? ~ GlobalIdent ~ Whitespace? ~ Comma ~ Whitespace? ~ LocalIdent ~ Whitespace? ~ Comma ~ Whitespace? ~ "{" ~ Whitespace? ~ Indices? ~ Whitespace? ~ "}"}


BasicBlockList = _{BasicBlock ~ (Whitespace | BasicBlock)*}
BasicBlock = { LabelIdent ~ (Whitespace | Comment)* ~ Instructions? ~ Whitespace* ~ Terminator?}

// here
IncList = { Inc ~ Whitespace? ~ (Comma ~ Whitespace? ~ Inc)*}
Inc = { "[" ~ Whitespace? ~ Value ~ Whitespace? ~ Comma ~ Whitespace? ~ LocalIdent ~ Whitespace? ~ "]"}

Clauses = { Clause ~ (Whitespace? ~ Clause)* }
clauseCatch = {"catch" ~ Whitespace? ~ Type ~ Whitespace? ~ Value}
ClauseFilter = {"filter" ~ Whitespace? ~ Type ~ Whitespace? ~ ArrayConst}
Clause = { 
    clauseCatch
	| ClauseFilter
}
Allockind = {AllockindKey ~ Whitespace? ~ "(" ~ Whitespace? ~ StringLit ~ Whitespace? ~")" }
MemoryArg = {LabelIdent ~ Whitespace? ~ Auth}
MemoryArgs = {MemoryArg ~ Whitespace? ~ (Comma ~ Whitespace? ~ MemoryArg)*}
MemoryArgItem = {
    | MemoryArgs
    | NoneConst
}
Memory = {Mem ~ "(" ~ Whitespace? ~ MemoryArgItem? ~ Whitespace? ~ ")"}
Terminator = { 
    RetTerm
	| BrTerm
	| CondBrTerm
	| SwitchTerm
	| IndirectBrTerm
	| InvokeTerm
	| ResumeTerm
	| CatchSwitchTerm
	| CatchRetTerm
	| CleanupRetTerm
	| UnreachableTerm
}
RetTerm = {"ret"  ~ Whitespace? ~ ConcreteType  ~ Whitespace? ~ Value?  ~ Whitespace? ~ MetadataAttachments?}
// Unconditional branch.
BrTerm = { "br"  ~ Whitespace? ~ LabelType  ~ Whitespace? ~ LocalIdent  ~ Whitespace? ~ MetadataAttachments?}
// Conditional branch.
LhsLocalIdent = {LocalIdent}
RhsLocalIdent = {LocalIdent}
CondBrTerm = { "br"  ~ Whitespace? ~ IntType  ~ Whitespace? ~ Value  ~ Whitespace? ~ Comma  ~ Whitespace? ~ LabelType  ~ Whitespace? ~ LhsLocalIdent  ~ Whitespace? ~ Comma  ~ Whitespace? ~ LabelType  ~ Whitespace? ~ RhsLocalIdent ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
SwitchTerm = { "switch"  ~ Whitespace? ~ Type  ~ Whitespace? ~ Value  ~ Whitespace? ~ Comma  ~ Whitespace? ~ LabelType  ~ Whitespace? ~ LocalIdent  ~ Whitespace? ~ "[" ~ Whitespace* ~ Cases?  ~ Whitespace* ~ "]" ~ Whitespace? ~ MetadataAttachments?}
Cases = {Case ~ Whitespace* ~ (Whitespace* ~ Case)*}
Case = { Type ~ Whitespace? ~ IntConst ~ Whitespace? ~ Comma ~ Whitespace? ~ LabelType ~ Whitespace? ~ LocalIdent}
IndirectBrTerm = { "indirectbr" ~ Whitespace? ~ Type ~ Whitespace? ~ Value ~ Whitespace? ~ Comma ~ Whitespace? ~ "[" ~ Whitespace* ~ LabelList ~ Whitespace* ~ "]" ~ Whitespace? ~ MetadataAttachments?}
LabelList = {Label ~ Whitespace? ~ (Comma ~ Whitespace? ~ Label)*}
Label = _{ LabelType ~ Whitespace? ~ LocalIdent}
InvokeTerm = { "invoke" ~ Whitespace? ~ CallingConv? ~ Whitespace? ~ ReturnAttrs? ~ Whitespace? ~ Type ~ Whitespace? ~ Value ~ Whitespace? ~ "(" ~ Whitespace? ~ Args? ~ Whitespace? ~ ")" ~ Whitespace? ~ FuncAttrs? ~ Whitespace? ~ OperandBundles? ~ Whitespace* ~ "to" ~ Whitespace? ~ LabelType ~ Whitespace? ~ LhsLocalIdent ~ Whitespace? ~ "unwind" ~ Whitespace? ~ LabelType ~ Whitespace? ~ RhsLocalIdent ~ Whitespace? ~ Comma? ~ Whitespace? ~ MetadataAttachments?}
ResumeTerm = { "resume" ~ Whitespace? ~ Type ~ Whitespace? ~ Value ~ Whitespace? ~ MetadataAttachments?}
CatchSwitchTerm = { "catchswitch" ~ Whitespace? ~ "within" ~ Whitespace? ~ ExceptionScope ~ Whitespace? ~ "[" ~ Whitespace* ~ LabelList ~ Whitespace* ~ "]" ~ Whitespace? ~ "unwind" ~ Whitespace? ~ UnwindTarget ~ Whitespace? ~ MetadataAttachments?}
CatchRetTerm = { "catchret" ~ Whitespace? ~ "from" ~ Whitespace? ~ Value ~ Whitespace? ~ "to" ~ Whitespace? ~ LabelType ~ Whitespace? ~ LocalIdent ~ Whitespace? ~ MetadataAttachments?}
CleanupRetTerm = { "cleanupret" ~ Whitespace? ~ "from" ~ Whitespace? ~ Value ~ Whitespace? ~ "unwind" ~ Whitespace? ~ UnwindTarget ~ Whitespace? ~ MetadataAttachments?}
UnreachableTerm = { "unreachable" ~ Whitespace? ~ MetadataAttachments?}

CommaSepTypeValueList = {
    TypeValue ~ Whitespace? ~ (Comma ~ Whitespace? ~ TypeValue)*
}

// ref: parseAllocSizeArguments
LhsIntLit = {IntLit}
RhsIntLit = {IntLit}
AllocSize = {"allocsize" ~ Whitespace? ~ "(" ~ Whitespace? ~ LhsIntLit ~ Whitespace? ~ Comma? ~ Whitespace? ~ RhsIntLit? ~ Whitespace? ~ ")"}

Args = { 
	| ArgList ~ Whitespace? ~ Comma? ~ Whitespace? ~ DotDotDot?
	| DotDotDot
}

ArgList = _{Arg ~ (Comma ~ Whitespace? ~ Arg)*}

ArgConcret = {ConcreteType ~ Whitespace? ~ ParamAttrs? ~ Whitespace? ~ Value}
ArgMetadata = {MetadataType ~ Whitespace? ~ Metadata}
Arg = { 
    ArgConcret
	| ArgMetadata
}

Comdat = { 
	Com ~ Whitespace? ~ "(" ~ Whitespace? ~ ComdatName ~ Whitespace? ~ ")"
    | Com
}


ExceptionArgs = {
	ExceptionArg ~ Whitespace? ~ (Comma ~ Whitespace? ~ ExceptionArg)*
}

ExceptionArgConcrete = {ConcreteType ~ Whitespace? ~ Value}
ExceptionArgMetadata = {MetadataType ~ Whitespace? ~ Metadata}
ExceptionArg = { 
    ExceptionArgConcrete
	| ExceptionArgMetadata
}

OperandBundles = {"[" ~ Whitespace? ~ OperandBundle ~ (Whitespace? ~ OperandBundle)* ~ Whitespace? ~ "]"}
OperandBundle = { StringLit ~ Whitespace? ~ "(" ~ Whitespace? ~ TypeValues ~ Whitespace? ~ ")"}

Params = { 
    ParamList ~ Whitespace? ~ Comma ~ Whitespace? ~ DotDotDot
	| ParamList
    | DotDotDot
}
ParamList = _{ Param ~ Whitespace? ~ (Comma ~ Whitespace? ~ Param)*}
Param = { Type ~ Whitespace? ~ ParamAttrs? ~ Whitespace? ~ LocalIdent?}
PreemptionSpecifier = { 
    DsoLocal
	| DsoPreemptable
}
// ___ [ Return Attribute ] __________________________________________________
ReturnAttrs = {ReturnAttr ~ Whitespace? ~ (Whitespace? ~ ReturnAttr)*}
ReturnAttr = { 
    Alignment
	| Dereferenceable
	| StringLit
	| Inreg
	| Noalias
	| Nonnull
	| Signext
	| Zeroext
    | Noundef
    | Range
}

StackAlignment = { "alignstack" ~ Whitespace? ~ "(" ~ Whitespace? ~ IntLit ~ Whitespace? ~ ")"}
SyncScope = { "syncscope" ~ Whitespace? ~ "(" ~ Whitespace? ~ StringLit ~ Whitespace? ~ ")"}
ThreadLocal = { 
	"thread_local" ~ Whitespace? ~ "(" ~ Whitespace? ~ TLSModel ~ Whitespace? ~ ")"
    | "thread_local"
}


TopLevelEntity = { 
    SourceFilename
	| TargetDefinition
	| ModuleAsm
	| TypeDef
	| ComdatDef
	| GlobalDecl
	| GlobalDef
	| IndirectSymbolDef
	| FunctionDecl
	| FunctionDef
	| AttrGroupDef
	| NamedMetadataDef
	| MetadataDef
	| UseListOrder
	| UseListOrderBB
}

Item = { (Comment ~ Whitespace?)* ~ Whitespace? ~ TopLevelEntity ~ Whitespace*}
Module = _{ SOI ~ Item* ~ EOI }